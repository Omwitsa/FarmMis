@model FarmMis.ViewModel.PacklistVm

<div class="container-fluid">
    <div class="row">
        <div class="main-header">
        </div>
    </div>

    <div class="row">
        <!--Basic Form starts-->
        <div class="col-sm">
            <div class="card">
                <div class="card-header">
                    <form asp-action="Packlist">
                        <div class="row">
                            <div class="col-xs-12 col-sm-6">
                                <h5 class="card-header-text">Packlist</h5>
                            </div>

                            <div class="col-xs-12 col-sm-1">
                                <label>Date:</label>
                            </div>
                            <div class="col-xs-12 col-sm-3">
                                <input asp-for="Date" class="form-control" type="date">
                            </div>
                            <div class="col-xs-12 col-sm-2">
                                @* <a class="btn btn-primary waves-effect waves-light" asp-action="Synch" role="button">Synch</a> *@
                                <button type="submit" class="btn btn-primary waves-effect waves-light">Synch</button>
                            </div>
                        </div>
                    </form>
                </div>

                <div class="card-block">
                    <form asp-action="SysSetup">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <div class="row">
                            <div class="form-group col-xs-12 col-sm-6 col-lg-6">
                                <label class="form-control-label">Product</label>
                                <input class="form-control" type="text" readonly>
                            </div>
                            <div class="form-group col-xs-12 col-sm-6 col-lg-3">
                                <label class="form-control-label">Box Qty</label>
                                <input class="form-control" type="text" readonly>
                            </div>
                            <div class="form-group col-xs-12 col-sm-6 col-lg-3">
                                <label class="form-control-label">Scan Qty</label>
                                <input class="form-control" type="text" readonly>
                            </div>
                        </div><hr />

                        <div class="row">
                            <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                                <label class="form-control-label">Customer</label>
                                <select class="form-control" asp-items="@ViewBag.customers" required></select>
                            </div>
                            <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                                <label class="form-control-label">Branch</label>
                                <input class="form-control" type="text" readonly>
                            </div>
                        </div><hr />

                        <div class="row">
                            <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                                <label class="form-control-label">Barcode</label>
                                <input class="form-control" type="text">
                            </div>
                        </div>

                        @* <div class="row">
                            <div class="form-group col-xs-12 col-sm-6 col-lg-4">
                                <a class="btn btn-primary waves-effect waves-light" asp-action="NewUserGroup" role="button">Synch</a>
                            </div>
                        </div> *@
                    </form>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script type="text/javascript">
        let userGroups = new Array();
        $(function () {
            let userDetail = @Html.Raw(Json.Serialize(Model));
            userGroups = userDetail.assignedGroups;
            populateGroupTable();

            let notificationType = "danger"; // success
            $('#add-group').on('click', function () {
                let group = $("#group").val();
                if (!group) {
                    notify('Kindly select the group', notificationType);
                    return
                }
                var details = userGroups.filter(p => p.group === group);
                if (details[0]) {
                    notify('Sorry, Group already exist', notificationType);
                    return
                }

                userGroups.push({
                    group: group
                });

                populateGroupTable();
            });

            $('#save').on('click', function () {
                let accesslevel = $('#general').is(':checked') ? 1 : 2;
                var id = $("#id").val();
                debugger
                let user = {
                    id: $("#id").val(),
                    userID: $("#userID").val(),
                    names: $("#names").val(),
                    password: $("#password").val(),
                    confirmPassword: $("#confirmPassword").val(),
                    email: $("#email").val(),
                    phone: $("#phone").val(),
                    site: $("#user-site").val(),
                    status: $('#status').is(':checked'),
                    accessLevel: accesslevel,
                    assignedGroups: userGroups,
                };

                $.ajax({
                    type: 'POST',
                    url: "editUser",
                    contentType: 'application/json',
                    data: JSON.stringify(user),
                    success: function (response) {
                        $("#userID").val('');
                    },
                    failure: function (response) {
                    }
                }).then(function () {
                    // ...
                });
            });
        });

        function removeItem(item) {
            item = item ? item : {};
            var index = userGroups.findIndex(p => p.group === item.group);
            userGroups.splice(index, 1);
            populateGroupTable();
        }

        function populateGroupTable() {
            let mappedGroups = userGroups.map(s => {
                // let transDate = new Date(s.date).toLocaleDateString();

                return "<tr>" +
                    "<td>" + s.group + "</td>" +
                    "<td><a class='btn-danger btn-sm' onclick='removeItem(" + JSON.stringify(s) + ")'>Remove</a></td>" +
                    "</tr>";
            });

            var strMappedGroups = mappedGroups.join('');
            $('#items').html(strMappedGroups);
        }

    </script>
}